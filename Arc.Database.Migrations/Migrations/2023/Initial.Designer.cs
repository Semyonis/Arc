// <auto-generated />
using System;
using Arc.Database.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Arc.Database.Migrations.Migrations._2023
{
    [DbContext(typeof(ArcDatabaseContext))]
    [Migration("20231026190814_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Arc.Models.DataBase.Models.Actor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(8)")
                        .HasColumnName("id");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("varchar(64)")
                        .HasColumnName("discriminator");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(256)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("varchar(128)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("varchar(128)")
                        .HasColumnName("last_name");

                    b.HasKey("Id")
                        .HasName("pk_actor");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_actor_email");

                    b.ToTable("actor", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("Actor");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Arc.Models.DataBase.Models.BaseDescription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(8)")
                        .HasColumnName("id");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("discriminator");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("varchar(128)")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("pk_base_description");

                    b.ToTable("base_description", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("BaseDescription");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Arc.Models.DataBase.Models.ComplexProperty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(8)")
                        .HasColumnName("id");

                    b.Property<int>("DescriptionId")
                        .HasColumnType("int(8)")
                        .HasColumnName("description_id");

                    b.Property<int>("GroupId")
                        .HasColumnType("int(8)")
                        .HasColumnName("group_id");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("varchar(128)")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("pk_complex_property");

                    b.HasIndex("DescriptionId")
                        .IsUnique()
                        .HasDatabaseName("ix_complex_property_description_id");

                    b.HasIndex("GroupId")
                        .IsUnique()
                        .HasDatabaseName("ix_complex_property_group_id");

                    b.HasIndex("Value")
                        .IsUnique()
                        .HasDatabaseName("ix_complex_property_value");

                    b.ToTable("complex_property", (string)null);
                });

            modelBuilder.Entity("Arc.Models.DataBase.Models.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(8)")
                        .HasColumnName("id");

                    b.Property<int>("DescriptionId")
                        .HasColumnType("int(8)")
                        .HasColumnName("description_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(256)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_group");

                    b.HasIndex("DescriptionId")
                        .IsUnique()
                        .HasDatabaseName("ix_group_description_id");

                    b.ToTable("group", (string)null);
                });

            modelBuilder.Entity("Arc.Models.DataBase.Models.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(8)")
                        .HasColumnName("id");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("date_created")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(128)")
                        .HasColumnName("name");

                    b.Property<int?>("UserId")
                        .HasColumnType("int(8)")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_item");

                    b.HasIndex("Name")
                        .HasDatabaseName("ix_item_name");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_item_user_id");

                    b.ToTable("item", (string)null);
                });

            modelBuilder.Entity("Arc.Models.DataBase.Models.ItemsComplexProperties", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("ComplexPropertyId")
                        .HasColumnType("int(8)")
                        .HasColumnName("complex_property_id");

                    b.Property<int>("ItemId")
                        .HasColumnType("int(8)")
                        .HasColumnName("item_id");

                    b.HasKey("Id")
                        .HasName("pk_items_complex_properties");

                    b.HasIndex("ComplexPropertyId")
                        .HasDatabaseName("ix_items_complex_properties_complex_property_id");

                    b.HasIndex("ItemId")
                        .HasDatabaseName("ix_items_complex_properties_item_id");

                    b.ToTable("items_complex_properties", (string)null);
                });

            modelBuilder.Entity("Arc.Models.DataBase.Models.ItemsSimpleProperties", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(8)")
                        .HasColumnName("id");

                    b.Property<int>("ItemId")
                        .HasColumnType("int(8)")
                        .HasColumnName("item_id");

                    b.Property<int>("SimplePropertyId")
                        .HasColumnType("int(8)")
                        .HasColumnName("simple_property_id");

                    b.HasKey("Id")
                        .HasName("pk_items_simple_properties");

                    b.HasIndex("ItemId")
                        .HasDatabaseName("ix_items_simple_properties_item_id");

                    b.HasIndex("SimplePropertyId")
                        .HasDatabaseName("ix_items_simple_properties_simple_property_id");

                    b.HasIndex("ItemId", "SimplePropertyId")
                        .IsUnique()
                        .HasDatabaseName("ix_items_simple_properties_item_id_simple_property_id");

                    b.ToTable("items_simple_properties", (string)null);
                });

            modelBuilder.Entity("Arc.Models.DataBase.Models.ServiceMode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(8)")
                        .HasColumnName("id");

                    b.Property<string>("Mode")
                        .IsRequired()
                        .HasColumnType("enum('On','Off')")
                        .HasColumnName("mode");

                    b.Property<DateTime>("UpdateDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("update_date_time")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("UpdatedById")
                        .HasColumnType("int(8)")
                        .HasColumnName("updated_by_id");

                    b.HasKey("Id")
                        .HasName("pk_service_mode");

                    b.HasIndex("UpdatedById")
                        .HasDatabaseName("ix_service_mode_updated_by_id");

                    b.ToTable("service_mode", (string)null);
                });

            modelBuilder.Entity("Arc.Models.DataBase.Models.SimpleProperty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(8)")
                        .HasColumnName("id");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("varchar(128)")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("pk_simple_property");

                    b.HasIndex("Value")
                        .IsUnique()
                        .HasDatabaseName("ix_simple_property_value");

                    b.ToTable("simple_property", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.DataProtection.EntityFrameworkCore.DataProtectionKey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("FriendlyName")
                        .HasColumnType("longtext")
                        .HasColumnName("friendly_name");

                    b.Property<string>("Xml")
                        .HasColumnType("longtext")
                        .HasColumnName("xml");

                    b.HasKey("Id")
                        .HasName("pk_data_protection_keys");

                    b.ToTable("data_protection_keys", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("id");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("normalized_name");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_role");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("asp_net_role", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext")
                        .HasColumnName("claim_value");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("role_id");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_role_claim");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_asp_net_role_claim_role_id");

                    b.ToTable("asp_net_role_claim", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("id");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int")
                        .HasColumnName("access_failed_count");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit(1)")
                        .HasColumnName("email_confirmed");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit(1)")
                        .HasColumnName("lockout_enabled");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("lockout_end");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("normalized_email");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("normalized_user_name");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext")
                        .HasColumnName("phone_number");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit(1)")
                        .HasColumnName("phone_number_confirmed");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext")
                        .HasColumnName("security_stamp");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit(1)")
                        .HasColumnName("two_factor_enabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("user_name");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_user");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("asp_net_user", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext")
                        .HasColumnName("claim_value");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_user_claim");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_asp_net_user_claim_user_id");

                    b.ToTable("asp_net_user_claim", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("login_provider");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("provider_key");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext")
                        .HasColumnName("provider_display_name");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("user_id");

                    b.HasKey("LoginProvider", "ProviderKey")
                        .HasName("pk_asp_net_user_login");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_asp_net_user_login_user_id");

                    b.ToTable("asp_net_user_login", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("user_id");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("role_id");

                    b.HasKey("UserId", "RoleId")
                        .HasName("pk_asp_net_user_role");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_asp_net_user_role_role_id");

                    b.ToTable("asp_net_user_role", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("user_id");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("login_provider");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .HasColumnType("longtext")
                        .HasColumnName("value");

                    b.HasKey("UserId", "LoginProvider", "Name")
                        .HasName("pk_asp_net_user_token");

                    b.ToTable("asp_net_user_token", (string)null);
                });

            modelBuilder.Entity("Arc.Models.DataBase.Models.Admin", b =>
                {
                    b.HasBaseType("Arc.Models.DataBase.Models.Actor");

                    b.HasDiscriminator().HasValue("Admin");
                });

            modelBuilder.Entity("Arc.Models.DataBase.Models.User", b =>
                {
                    b.HasBaseType("Arc.Models.DataBase.Models.Actor");

                    b.HasDiscriminator().HasValue("User");
                });

            modelBuilder.Entity("Arc.Models.DataBase.Models.ComplexPropertyDescription", b =>
                {
                    b.HasBaseType("Arc.Models.DataBase.Models.BaseDescription");

                    b.Property<int>("ComplexPropertyId")
                        .HasColumnType("int")
                        .HasColumnName("complex_property_id");

                    b.HasDiscriminator().HasValue("ComplexPropertyDescription");
                });

            modelBuilder.Entity("Arc.Models.DataBase.Models.GroupDescription", b =>
                {
                    b.HasBaseType("Arc.Models.DataBase.Models.BaseDescription");

                    b.Property<int>("GroupId")
                        .HasColumnType("int")
                        .HasColumnName("group_id");

                    b.HasDiscriminator().HasValue("GroupDescription");
                });

            modelBuilder.Entity("Arc.Models.DataBase.Models.ComplexProperty", b =>
                {
                    b.HasOne("Arc.Models.DataBase.Models.ComplexPropertyDescription", "Description")
                        .WithOne("ComplexProperty")
                        .HasForeignKey("Arc.Models.DataBase.Models.ComplexProperty", "DescriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_complex_property_base_description_description_id1");

                    b.HasOne("Arc.Models.DataBase.Models.Group", "Group")
                        .WithMany("ComplexProperties")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_complex_property_group_group_id");

                    b.Navigation("Description");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("Arc.Models.DataBase.Models.Group", b =>
                {
                    b.HasOne("Arc.Models.DataBase.Models.GroupDescription", "Description")
                        .WithOne("Group")
                        .HasForeignKey("Arc.Models.DataBase.Models.Group", "DescriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_group_base_description_description_id1");

                    b.Navigation("Description");
                });

            modelBuilder.Entity("Arc.Models.DataBase.Models.Item", b =>
                {
                    b.HasOne("Arc.Models.DataBase.Models.User", null)
                        .WithMany("Items")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_item_actor_user_id");
                });

            modelBuilder.Entity("Arc.Models.DataBase.Models.ItemsComplexProperties", b =>
                {
                    b.HasOne("Arc.Models.DataBase.Models.ComplexProperty", "ComplexProperty")
                        .WithMany()
                        .HasForeignKey("ComplexPropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_items_complex_properties_complex_property_complex_property_id");

                    b.HasOne("Arc.Models.DataBase.Models.Item", "Item")
                        .WithMany("ComplexPropertyLinks")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_items_complex_properties_item_item_id");

                    b.Navigation("ComplexProperty");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("Arc.Models.DataBase.Models.ItemsSimpleProperties", b =>
                {
                    b.HasOne("Arc.Models.DataBase.Models.Item", "Item")
                        .WithMany("SimplePropertyLinks")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_items_simple_properties_item_item_id");

                    b.HasOne("Arc.Models.DataBase.Models.SimpleProperty", "SimpleProperty")
                        .WithMany("ItemLinks")
                        .HasForeignKey("SimplePropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_items_simple_properties_simple_property_simple_property_id");

                    b.Navigation("Item");

                    b.Navigation("SimpleProperty");
                });

            modelBuilder.Entity("Arc.Models.DataBase.Models.ServiceMode", b =>
                {
                    b.HasOne("Arc.Models.DataBase.Models.Admin", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_service_mode_actor_updated_by_id");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_role_claim_asp_net_role_role_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_claim_asp_net_user_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_login_asp_net_user_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_role_asp_net_role_role_id");

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_role_asp_net_user_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_token_asp_net_user_user_id");
                });

            modelBuilder.Entity("Arc.Models.DataBase.Models.Group", b =>
                {
                    b.Navigation("ComplexProperties");
                });

            modelBuilder.Entity("Arc.Models.DataBase.Models.Item", b =>
                {
                    b.Navigation("ComplexPropertyLinks");

                    b.Navigation("SimplePropertyLinks");
                });

            modelBuilder.Entity("Arc.Models.DataBase.Models.SimpleProperty", b =>
                {
                    b.Navigation("ItemLinks");
                });

            modelBuilder.Entity("Arc.Models.DataBase.Models.User", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("Arc.Models.DataBase.Models.ComplexPropertyDescription", b =>
                {
                    b.Navigation("ComplexProperty")
                        .IsRequired();
                });

            modelBuilder.Entity("Arc.Models.DataBase.Models.GroupDescription", b =>
                {
                    b.Navigation("Group")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
